algorithm findPath is										
	input: list of cities, list of connections, starting city, destination city			
	output: list of cities forming the shortest path from the starting city to the destination city	
	
	IF starting city is the same as destination city THEN							
		SET sameCityPath as a new list of cities								
		ADD starting city to sameCityPath								
		RETURN sameCityPath									
	ENDIF
								
	INITIALIZE array Visited to mark whether each city has been visited, initially SET to false for all cities											
	INITIALIZE array Distances with infinite values for all cities					
	INITIALIZE array Previous to store the preceding city on the path for each city, initially SET to a null equivalent
	
	SET distance of starting city in Distances to 0
	
	WHILE there is an unvisited city with a finite distance DO						
		Find the unvisited city with the smallest distance (let it be CurrentCity)				
		Mark CurrentCity as visited
		
		FOR each connection from CurrentCity to a neighboring city (Neighbor) DO				
			Calculate the potential new distance as the sum of the distance to CurrentCity and the distance from CurrentCity to Neighbor.								
			IF this potential new distance is less than the current distance to Neighbor in Distances THEN																Update Neighbor’s distance in Distances to this new lower distance.				
				Update Neighbor's preceding city in Previous to CurrentCity				
			ENDIF											
		ENDFOR										
	ENDWHILE

	IF the destination city has no preceding city in Previous THEN						
		RETURN null or an equivalent to indicate no path exists					
	ENDIF
	
	INITIALIZE an empty list of cities ShortestPath							
	Start with the destination city as the current city to examine and trace back through Previous to reach the starting city									
	WHILE the current city is not null or an equivalent to indicate current city has no preceding city DO															INSERT the current city at the beginning of ShortestPath						
		SET current city to its previous							
	ENDWHILE
	
	RETURN ShortestPath 


algorithm indexOfCity
	input: a list of cities ‘cities’, a city ‘city’ to find
	output: the index of ‘city’ in the ‘cities’ list, or -1 if ‘city’ is not found
	
	FOR each city in cities with index i DO									
		IF city at index i equals to ‘city’ THEN									
			RETURN i										
		ENDIF											
	ENDFOR
	
	RETURN -1 (indicates ‘city’ was not found in ‘cities’)

